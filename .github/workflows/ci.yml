name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NEXT_TELEMETRY_DISABLED: '1'
  CI: 'true'

jobs:
  verify:
    name: Verify (lint, typecheck, tests, build)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: next_app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d next_app"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/next_app?schema=public
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack (pnpm)
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma:generate

      - name: Prepare database
        shell: bash
        run: |
          if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations)" ]; then
            pnpm exec prisma migrate deploy
          else
            echo 'No Prisma migrations found; running prisma db push instead.'
            pnpm exec prisma db push --skip-generate
          fi

      - name: Seed database
        run: pnpm run --if-present prisma:seed

      - name: Lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm typecheck

      - name: Unit tests
        run: pnpm run --if-present test:unit

      - name: Integration tests
        run: pnpm run --if-present test:integration

      - name: Test (fallback)
        run: pnpm run --if-present test

      - name: Build
        run: pnpm build

      - name: Upload Prisma Client artifact
        uses: actions/upload-artifact@v4
        with:
          name: prisma-client
          path: |
            node_modules/.prisma
            node_modules/@prisma/client
          retention-days: 1
          if-no-files-found: error

  e2e:
    name: Playwright E2E
    needs: verify
    if: ${{ hashFiles('playwright.config.{js,cjs,mjs,ts}') != '' }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: next_app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d next_app"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/next_app?schema=public
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack (pnpm)
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Prisma Client artifact
        uses: actions/download-artifact@v4
        with:
          name: prisma-client
          path: .

      - name: Prepare database
        shell: bash
        run: |
          if [ -d prisma/migrations ] && [ "$(ls -A prisma/migrations)" ]; then
            pnpm exec prisma migrate deploy
          else
            echo 'No Prisma migrations found; running prisma db push instead.'
            pnpm exec prisma db push --skip-generate
          fi

      - name: Seed database
        run: pnpm run --if-present prisma:seed

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests
        run: pnpm exec playwright test --reporter=line
